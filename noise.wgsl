
struct NoiseInformation {
    amplitude : f32,
    frequency : f32,
    lacunarity : f32,
    persistence : f32
}

struct TerrainInformation {
    worldDimensions : vec4f,
    dimensions : vec4f,
    color : vec4f
}

@group(0) @binding(0) var<uniform> noiseInfo: NoiseInformation;
@group(0) @binding(1) var<uniform> terrainInfo: TerrainInformation;
@group(0) @binding(2) var<storage, read_write> _vertices: array<f32>;
@group(0) @binding(3) var<storage, read_write> densityTexture: array<array<array<f32, 35>, 35>>;

const mantissaBitmask = 0x007FFFFFu; //Mantissa
const mantissaOne = 0x3F800000u; //1.0 in IEEE binary32
const F3 = 1.0 / 3.0;
const G3 = 1.0 / 6.0;
const G2 = G3 * 2.0;
const G1 = 1.0 - G3 * 3.0;
const cornerFromA = array<u32, 12>(0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3);
const cornerFromB = array<u32, 12>(1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7);
const gradients = array(
    vec3f(1, 1, 0), vec3f(-1, 1, 0), vec3f(1, -1, 0), vec3f(-1, -1, 0), vec3f(1, 0, 1), vec3f(-1, 0, 1), 
    vec3f(1, 0, -1), vec3f(-1, 0, -1), vec3f(0, 1, 1), vec3f(0, -1, 1), vec3f(0, 1, -1), vec3f(0, -1, -1)
);

const perm = array(151,160,137,91,90,15,
             131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
             190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
             88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
             77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
             102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
             135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
             5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
             223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
             129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
             251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
             49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
             138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,
             160,137,91,90,15,131,13,201,95,96,53, 194,233,7,225,140,36,103,30,69,142, 8,
             99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
             35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175, 74, 165,
             71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230, 220, 105,
             92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,
             208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,
             52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,
             16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163,70,221,153,
             101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232, 178, 185, 
             112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,
             145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204, 176, 115,
             121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,
             78,66,215,61,156,180);

const triLookup = array<array<u32, 2>, 256>(array(0, 0), array(0, 3), array(3, 3), array(6, 6), array(12, 3), array(15, 6), array(21, 6), array(27, 9), array(36, 3), array(39, 6), 
                                    array(45, 6), array(51, 9), array(60, 6), array(66, 9), array(75, 9), array(84, 6), array(90, 3), array(93, 6), array(99, 6), array(105, 9), 
                                    array(114, 6), array(120, 9), array(129, 9), array(138, 12), array(150, 6), array(156, 9), array(165, 9), array(174, 12), array(186, 9), 
                                    array(195, 12), array(207, 12), array(219, 9), array(228, 3), array(231, 6), array(237, 6), array(243, 9), array(252, 6), array(258, 9), 
                                    array(267, 9), array(276, 12), array(288, 6), array(294, 9), array(303, 9), array(312, 12), array(324, 9), array(333, 12), array(345, 12), 
                                    array(357, 9), array(366, 6), array(372, 9), array(381, 9), array(390, 6), array(396, 9), array(405, 12), array(417, 12), array(429, 9), 
                                    array(438, 9), array(447, 12), array(459, 12), array(471, 9), array(480, 12), array(492, 15), array(507, 15), array(522, 6), array(528, 3), 
                                    array(531, 6), array(537, 6), array(543, 9), array(552, 6), array(558, 9), array(567, 9), array(576, 12), array(588, 6), array(594, 9),
                                    array(603, 9), array(612, 12), array(624, 9), array(633, 12), array(645, 12), array(657, 9), array(666, 6), array(672, 9), array(681, 9),
                                    array(690, 12), array(702, 9), array(711, 12), array(723, 12), array(735, 15), array(750, 9), array(759, 12), array(771, 12), 
                                    array(783, 15), array(798, 12), array(810, 15), array(825, 15), array(840, 12), array(852, 6), array(858, 9), array(867, 9),
                                    array(876, 12), array(888, 9), array(897, 12), array(909, 6), array(915, 9), array(924, 9), array(933, 12), array(945, 12), 
                                    array(957, 15), array(972, 12), array(984, 15), array(999, 9), array(1008, 6), array(1014, 9), array(1023, 12), array(1035, 12),
                                    array(1047, 9), array(1056, 12), array(1068, 15), array(1083, 9), array(1092, 6), array(1098, 12), array(1110, 15), array(1125, 15),
                                    array(1140, 12), array(1152, 15), array(1167, 6), array(1173, 12), array(1185, 3), array(1188, 3), array(1191, 6), array(1197, 6),
                                    array(1203, 9), array(1212, 6), array(1218, 9), array(1227, 9), array(1236, 12), array(1248, 6), array(1254, 9), array(1263, 9), 
                                    array(1272, 12), array(1284, 9), array(1293, 12), array(1305, 12), array(1317, 9), array(1326, 6), array(1332, 9), array(1341, 9),
                                    array(1350, 12), array(1362, 9), array(1371, 12), array(1383, 12), array(1395, 15), array(1410, 9), array(1419, 6), array(1425, 12),
                                    array(1437, 9), array(1446, 12), array(1458, 9), array(1467, 15), array(1482, 6), array(1488, 6), array(1494, 9), array(1503, 9),
                                    array(1512, 12), array(1524, 9), array(1533, 12), array(1545, 12), array(1557, 15), array(1572, 9), array(1581, 12), array(1593, 12),
                                    array(1605, 15), array(1620, 12), array(1632, 15), array(1647, 15), array(1662, 12), array(1674, 9), array(1683, 12), array(1695, 12),
                                    array(1707, 9), array(1716, 12), array(1728, 15), array(1743, 15), array(1758, 12), array(1770, 12), array(1782, 9), array(1791, 15),
                                    array(1806, 6), array(1812, 15), array(1827, 12), array(1839, 6), array(1845, 3), array(1848, 6), array(1854, 9), array(1863, 9),
                                    array(1872, 12), array(1884, 9), array(1893, 12), array(1905, 12), array(1917, 15), array(1932, 9), array(1941, 12), array(1953, 12),
                                    array(1965, 15), array(1980, 6), array(1986, 9), array(1995, 9), array(2004, 6), array(2010, 9), array(2019, 12), array(2031, 12),
                                    array(2043, 15), array(2058, 12), array(2070, 15), array(2085, 15), array(2100, 6), array(2106, 12), array(2118, 9), array(2127, 15),
                                    array(2142, 12), array(2154, 9), array(2163, 6), array(2169, 12), array(2181, 3), array(2184, 9), array(2193, 12), array(2205, 12),
                                    array(2217, 15), array(2232, 12), array(2244, 15), array(2259, 9), array(2268, 12), array(2280, 12), array(2292, 15), array(2307, 15),
                                    array(2322, 6), array(2328, 9), array(2337, 12), array(2349, 6), array(2355, 3), array(2358, 6), array(2364, 9), array(2373, 9), 
                                    array(2382, 6), array(2388, 9), array(2397, 12), array(2409, 6), array(2415, 3), array(2418, 9), array(2427, 6), array(2433, 12),
                                    array(2445, 3), array(2448, 6), array(2454, 3), array(2457, 3), array(2460, 0));

const triTable = array<u32, 2460>(0, 8, 3, 0, 1, 9, 1, 8, 3, 9, 8, 1, 1, 2, 10, 0, 8, 3, 1, 2, 10, 9, 2, 10, 0, 2, 9,
                                  2, 8, 3, 2, 10, 8, 10, 9, 8, 3, 11, 2, 0, 11, 2, 8, 11, 0, 1, 9, 0, 2, 3, 11, 1, 11, 
                                  2, 1, 9, 11, 9, 8, 11, 3, 10, 1, 11, 10, 3, 0, 10, 1, 0, 8, 10, 8, 11, 10, 3, 9, 0, 
                                  3, 11, 9, 11, 10, 9, 9, 8, 10, 10, 8, 11, 4, 7, 8, 4, 3, 0, 7, 3, 4, 0, 1, 9, 8, 4, 
                                  7, 4, 1, 9, 4, 7, 1, 7, 3, 1, 1, 2, 10, 8, 4, 7, 3, 4, 7, 3, 0, 4, 1, 2, 10, 9, 2, 
                                  10, 9, 0, 2, 8, 4, 7, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, 8, 4, 7, 3, 11, 2, 11, 4, 
                                  7, 11, 2, 4, 2, 0, 4, 9, 0, 1, 8, 4, 7, 2, 3, 11, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 
                                  1, 3, 10, 1, 3, 11, 10, 7, 8, 4, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, 4, 7, 8, 9, 
                                  0, 11, 9, 11, 10, 11, 0, 3, 4, 7, 11, 4, 11, 9, 9, 11, 10, 9, 5, 4, 9, 5, 4, 0, 8, 3, 
                                  0, 5, 4, 1, 5, 0, 8, 5, 4, 8, 3, 5, 3, 1, 5, 1, 2, 10, 9, 5, 4, 3, 0, 8, 1, 2, 10, 4, 
                                  9, 5, 5, 2, 10, 5, 4, 2, 4, 0, 2, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, 9, 5, 4, 2, 3, 
                                  11, 0, 11, 2, 0, 8, 11, 4, 9, 5, 0, 5, 4, 0, 1, 5, 2, 3, 11, 2, 1, 5, 2, 5, 8, 2, 8, 
                                  11, 4, 8, 5, 10, 3, 11, 10, 1, 3, 9, 5, 4, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, 5, 
                                  4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, 5, 4, 8, 5, 8, 10, 10, 8, 11, 9, 7, 8, 5, 7, 9, 
                                  9, 3, 0, 9, 5, 3, 5, 7, 3, 0, 7, 8, 0, 1, 7, 1, 5, 7, 1, 5, 3, 3, 5, 7, 9, 7, 8, 9, 
                                  5, 7, 10, 1, 2, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 
                                  2, 2, 10, 5, 2, 5, 3, 3, 5, 7, 7, 9, 5, 7, 8, 9, 3, 11, 2, 9, 5, 7, 9, 7, 2, 9, 2, 0, 
                                  2, 7, 11, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, 11, 2, 1, 11, 1, 7, 7, 1, 5, 9, 5, 8, 
                                  8, 5, 7, 10, 1, 3, 10, 3, 11, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, 11, 10, 
                                  0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, 11, 10, 5, 7, 11, 5, 10, 6, 5, 0, 8, 3, 5, 10, 
                                  6, 9, 0, 1, 5, 10, 6, 1, 8, 3, 1, 9, 8, 5, 10, 6, 1, 6, 5, 2, 6, 1, 1, 6, 5, 1, 2, 6, 3, 
                                  0, 8, 9, 6, 5, 9, 0, 6, 0, 2, 6, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, 2, 3, 11, 10, 6, 5, 
                                  11, 0, 8, 11, 2, 0, 10, 6, 5, 0, 1, 9, 2, 3, 11, 5, 10, 6, 5, 10, 6, 1, 9, 2, 9, 11, 2, 
                                  9, 8, 11, 6, 3, 11, 6, 5, 3, 5, 1, 3, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, 3, 11, 6, 0, 
                                  3, 6, 0, 6, 5, 0, 5, 9, 6, 5, 9, 6, 9, 11, 11, 9, 8, 5, 10, 6, 4, 7, 8, 4, 3, 0, 4, 7, 3, 
                                  6, 5, 10, 1, 9, 0, 5, 10, 6, 8, 4, 7, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, 6, 1, 2, 6, 5, 
                                  1, 4, 7, 8, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, 7, 3, 
                                  9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, 3, 11, 2, 7, 8, 4, 10, 6, 5, 5, 10, 6, 4, 7, 2, 4, 
                                  2, 0, 2, 7, 11, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 
                                  4, 5, 10, 6, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 
                                  0, 4, 11, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 
                                  9, 10, 4, 9, 6, 4, 10, 4, 10, 6, 4, 9, 10, 0, 8, 3, 10, 0, 1, 10, 6, 0, 6, 4, 0, 8, 3, 1, 
                                  8, 1, 6, 8, 6, 4, 6, 1, 10, 1, 4, 9, 1, 2, 4, 2, 6, 4, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, 
                                  0, 2, 4, 4, 2, 6, 8, 3, 2, 8, 2, 4, 4, 2, 6, 10, 4, 9, 10, 6, 4, 11, 2, 3, 0, 8, 2, 2, 8, 
                                  11, 4, 9, 10, 4, 10, 6, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, 6, 4, 1, 6, 1, 10, 4, 8, 1, 
                                  2, 1, 11, 8, 11, 1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 
                                  4, 6, 4, 1, 3, 11, 6, 3, 6, 0, 0, 6, 4, 6, 4, 8, 11, 6, 8, 7, 10, 6, 7, 8, 10, 8, 9, 10, 0, 
                                  7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, 10, 6, 7, 10, 7, 1, 
                                  1, 7, 3, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, 7, 
                                  8, 0, 7, 0, 6, 6, 0, 2, 7, 3, 2, 6, 7, 2, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, 2, 0, 7, 2, 
                                  7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, 11, 2, 1, 
                                  11, 1, 7, 10, 6, 1, 6, 7, 1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, 0, 9, 1, 11, 6, 7, 
                                  7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, 7, 11, 6, 7, 6, 11, 3, 0, 8, 11, 7, 6, 0, 1, 9, 11, 7, 
                                  6, 8, 1, 9, 8, 3, 1, 11, 7, 6, 10, 1, 2, 6, 11, 7, 1, 2, 10, 3, 0, 8, 6, 11, 7, 2, 9, 0, 2, 
                                  10, 9, 6, 11, 7, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, 7, 2, 3, 6, 2, 7, 7, 0, 8, 7, 6, 0, 
                                  6, 2, 0, 2, 7, 6, 2, 3, 7, 0, 1, 9, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, 10, 7, 6, 10, 1, 7, 1, 
                                  3, 7, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, 7, 6, 10, 
                                  7, 10, 8, 8, 10, 9, 6, 8, 4, 11, 8, 6, 3, 6, 11, 3, 0, 6, 0, 4, 6, 8, 6, 11, 8, 4, 6, 9, 0, 1,
                                  9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, 6, 8, 4, 6, 11, 8, 2, 10, 1, 1, 2, 10, 3, 0, 11, 0, 6, 
                                  11, 0, 4, 6, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 
                                  6, 3, 8, 2, 3, 8, 4, 2, 4, 6, 2, 0, 4, 2, 4, 6, 2, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, 1, 9, 
                                  4, 1, 4, 2, 2, 4, 6, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, 10, 1, 0, 10, 0, 6, 6, 0, 4, 4, 6, 
                                  3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, 10, 9, 4, 6, 10, 4, 4, 9, 5, 7, 6, 11, 0, 8, 3, 4, 9, 
                                  5, 11, 7, 6, 5, 0, 1, 5, 4, 0, 7, 6, 11, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, 9, 5, 4, 10, 1, 
                                  2, 7, 6, 11, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, 3, 
                                  4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, 7, 2, 3, 7, 6, 2, 5, 4, 9, 9, 5, 4, 0, 8, 6, 0, 6, 
                                  2, 6, 8, 7, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, 
                                  9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, 4, 0, 10, 
                                  4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, 6, 9, 5, 6, 
                                  11, 9, 11, 8, 9, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, 
                                  6, 11, 3, 6, 3, 5, 5, 3, 1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, 0, 11, 3, 0, 6, 11, 0, 9, 
                                  6, 5, 6, 9, 1, 2, 10, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, 6, 11, 3, 6, 3, 5, 2, 
                                  10, 3, 10, 5, 3, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, 9, 5, 6, 9, 6, 0, 0, 6, 2, 1, 5, 8, 1, 8, 
                                  0, 5, 6, 8, 3, 8, 2, 6, 2, 8, 1, 5, 6, 2, 1, 6, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6,
                                  10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, 0, 3, 8, 5, 6, 10, 10, 5, 6, 11, 5, 10, 7, 5, 11, 11, 5, 
                                  10, 11, 7, 5, 8, 3, 0, 5, 11, 7, 5, 10, 11, 1, 9, 0, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, 11, 
                                  1, 2, 11, 7, 1, 7, 5, 1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 
                                  7, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, 2, 5, 10, 2, 3, 5, 3, 7, 5, 8, 2, 0, 8, 5, 2, 
                                  8, 7, 5, 10, 2, 5, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 
                                  7, 5, 2, 1, 3, 5, 3, 7, 5, 0, 8, 7, 0, 7, 1, 1, 7, 5, 9, 0, 3, 9, 3, 5, 5, 3, 7, 9, 8, 7, 5, 9, 
                                  7, 5, 8, 4, 5, 10, 8, 10, 11, 8, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, 0, 1, 9, 8, 4, 10, 8, 
                                  10, 11, 10, 4, 5, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, 2, 5, 1, 2, 8, 5, 2, 11, 8, 
                                  4, 5, 8, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 
                                  11, 8, 5, 9, 4, 5, 2, 11, 3, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, 5, 10, 2, 5, 2, 4, 4, 2, 0,
                                  3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, 8, 4, 5, 8, 
                                  5, 3, 3, 5, 1, 0, 4, 5, 1, 0, 5, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, 9, 4, 5, 4, 11, 7, 4, 9, 
                                  11, 9, 10, 11, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, 
                                  3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, 9, 7, 
                                  4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, 11, 7, 4, 11, 4, 2, 2, 4, 0, 11, 7, 4, 11, 4, 2, 8, 
                                  3, 4, 3, 2, 4, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 
                                  7, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, 1, 10, 2, 8, 7, 4, 4, 9, 1, 4, 1, 7, 7, 1, 
                                  3, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, 4, 0, 3, 7, 4, 3, 4, 8, 7, 9, 10, 8, 10, 11, 8, 3, 0, 9, 
                                  3, 9, 11, 11, 9, 10, 0, 1, 10, 0, 10, 8, 8, 10, 11, 3, 1, 10, 11, 3, 10, 1, 2, 11, 1, 11, 9, 9, 
                                  11, 8, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, 0, 2, 11, 8, 0, 11, 3, 2, 11, 2, 3, 8, 2, 8, 10, 
                                  10, 8, 9, 9, 10, 2, 0, 9, 2, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, 1, 10, 2, 1, 3, 8, 9, 1, 8,
                                  0, 9, 1, 0, 3, 8);

fn perlinNoise(position: vec3f, quality: i32) -> f32 {
    var s : f32;
    var ijk : vec3f;
    var zero : vec3f;
    var pos : vec3f;
    var i1 : i32;
    var j1 : i32;
    var k1 : i32;
    var i2 : i32;
    var j2 : i32;
    var k2 : i32;
    var ii : i32;
    var jj : i32;
    var kk : i32;
    var one : vec3f;
    var two : vec3f;
    var three : vec3f;
    var t : f32;
    var noise = 0.0;
    var totalNoise = 0.0;
    var amplitude = noiseInfo.amplitude;
    var frequency = noiseInfo.frequency;
    var totalAmplitude = 0.0;

    for (var octave = 0; octave < quality; octave++) {
        pos = (position + 0.5) * frequency + terrainInfo.dimensions.w;
        s = (pos.x + pos.y + pos.z) * F3; //Skew Factor
        ijk = floor(pos + s);
        zero = pos - ijk + (ijk.x + ijk.y + ijk.z) * G3;

        if (zero.x >= zero.y) {
            j1 = 0;
            i2 = 1;
            if (zero.y >= zero.z) { //X Y Z
                i1 = 1;  
                k1 = 0; 
                j2 = 1; 
                k2 = 0; 
            } else if (zero.x >= zero.z) { //X Z Y
                i1 = 1;  
                k1 = 0;  
                j2 = 0; 
                k2 = 1; 
            } else { //Z X Y
                i1 = 0;  
                k1 = 1; 
                j2 = 0; 
                k2 = 1; 
            } 
        } else { 
            i1 = 0;
            j2 = 1;
            if (zero.y < zero.z) { //Z Y X
                j1 = 0; 
                k1 = 1; 
                i2 = 0;  
                k2 = 1; 
            } else if (zero.x < zero.z) { //Y Z X
                j1 = 1; 
                k1 = 0; 
                i2 = 0; 
                k2 = 1; 
            } else { //Y X Z
                j1 = 1; 
                k1 = 0; 
                i2 = 1; 
                k2 = 0; 
            } 
        }

        one = zero - vec3f(f32(i1) - G3, f32(j1) - G3, f32(k1) - G3);
        two = zero - vec3f(f32(i2) - G2, f32(j2) - G2, f32(k2) - G2);
        three = zero - G1;
        
        ii = i32(ijk.x) & 255;
        jj = i32(ijk.y) & 255;
        kk = i32(ijk.z) & 255;
        
        t = 0.6 - dot(zero, zero);
        if (t >= 0) {
            noise += pow(t, 4) * dot(zero, gradients[perm[ii + perm[jj + perm[kk]]] % 12]);
        }

        t = 0.6 - dot(one, one);
        if (t >= 0) {
            noise += pow(t, 4) * dot(one, gradients[perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12]);
        }
        
        t = 0.6 - dot(two, two);
        if (t >= 0) {
            noise += pow(t, 4) * dot(two, gradients[perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12]);
        }

        t = 0.6 - dot(three, three);
        if (t >= 0) {
            noise += pow(t, 4) * dot(three, gradients[perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12]);
        }
        
        totalNoise += noise * amplitude;
        amplitude *= noiseInfo.persistence;
        totalAmplitude += amplitude;
        frequency *= noiseInfo.lacunarity;
    }

    return totalNoise * 32.0 / totalAmplitude;
}

fn toWorld(c: vec3f) -> vec3f {
    return terrainInfo.worldDimensions.xyz * c / (32.0 * terrainInfo.dimensions.xyz);
}

const warpMultiplier = 8;
const shelfThickness = 4;
const shelfPos = -20;
const shelfStrength = 0;

fn smoothSnap(t: f32, m: f32) -> f32 {
    let c = round(t);
    let s = 1 - 2 * c;
    return c + s * pow(2 * (c + s * t), m) * 0.5;  
}

fn calcDensity(pos: vec3f) -> f32 {
    let warp = vec3f(perlinNoise(pos * 0.971 + 200, 4) * 2 + perlinNoise(pos * 0.461 + 300, 4),
                     perlinNoise(pos * 0.997 + 100, 4) * 2 + perlinNoise(pos * 0.453, 4),
                     perlinNoise(pos * 1.032 + 300, 4) * 2 + perlinNoise(pos * 0.511 + 200, 4)) * 0.32;

    let rand = normalize(warp);
    let ws = pos + warpMultiplier * warp;
    var density = -ws.y;

    density = mix(density, shelfStrength, 0.83 * saturate(shelfThickness - abs(ws.y - shelfPos)));
    density += perlinNoise(ws * vec3f(2, 27, 2) * 0.7, 4) * 0.25 * saturate(rand.x * 2.0 - 1);

    density += pow(4.0, 0.5 * perlinNoise(ws, 8) - 0.1);
    density += perlinNoise(ws * 0.025 + 25, 8) * 8;
    density += perlinNoise(ws * 0.125 + 125, 8) * 4;
    density += perlinNoise(ws * 0.985 + 985, 8) * 1.25;
    density += perlinNoise(ws * 1.868 + 1868, 8);
    density += perlinNoise(pos * 1000000 + 100, 16) * 0.025;
    
    return density;
}

fn density(pos: vec3f) -> f32 {
    let idx = vec3i(floor(pos) + 1);
    return densityTexture[idx.x][idx.y][idx.z];
}

fn calcNormal(c: vec3f) -> vec3f {
    return normalize(vec3f(
        density(vec3f(c.x - 1, c.yz)) -     density(vec3f(c.x + 1, c.yz)),
        density(vec3f(c.x, c.y - 1, c.z)) - density(vec3f(c.x, c.y + 1, c.z)),
        density(vec3f(c.xy, c.z - 1)) -     density(vec3f(c.xy, c.z + 1))
    ));
}

fn interpolate(offset: vec3f, vertID: u32, a: vec3f, b: vec3f) {
    let densityA = density(a);
    let densityB = density(b);
    let t = -densityA / (densityB - densityA);

    let vertPos = mix(toWorld(a + offset + vec3f(0, densityA, 0)), toWorld(b + offset + vec3f(0, densityB, 0)), t);
    let normal = mix(calcNormal(a), calcNormal(b), t);

    _vertices[vertID] = vertPos.x;
    _vertices[vertID + 1] = vertPos.y;
    _vertices[vertID + 2] = vertPos.z;
    _vertices[vertID + 3] = normal.x;
    _vertices[vertID + 4] = normal.y;
    _vertices[vertID + 5] = normal.z;
} 

@compute @workgroup_size(1, 1, 1)
fn computeMain() {
    var offset : vec3f;
    var index : u32;
    var lookupLimit : u32;
    var edgeA : u32;
    var edgeB : u32;
    var edgeC : u32;
    var coord = array<vec3f, 8>();
    var vertID : u32 = 1;

    for (var blockX = 0; blockX < i32(terrainInfo.dimensions.x); blockX++) {
        for (var blockY = 0; blockY < i32(terrainInfo.dimensions.y); blockY++) {
            for (var blockZ = 0; blockZ < i32(terrainInfo.dimensions.z); blockZ++) {
                offset = vec3f(f32(blockX), f32(blockY), f32(blockZ)) * 32.0;

                for (var x = 0; x < 35; x++) {
                    for (var y = 0; y < 35; y++) {
                        for (var z = 0; z < 35; z++) {
                            densityTexture[x][y][z] = calcDensity(vec3f(f32(x), f32(y), f32(z)) + offset - 1);
                        }
                    }
                }

                for (var x = 0; x < 32; x++) {
                    for (var y = 0; y < 32; y++) {
                        for (var z = 0; z < 32; z++) {
                            coord[0] = vec3f(f32(x), f32(y), f32(z));
                            coord[1] = vec3f(f32(x + 1), f32(y), f32(z));
                            coord[2] = vec3f(f32(x + 1), f32(y), f32(z + 1));
                            coord[3] = vec3f(f32(x), f32(y), f32(z + 1));
                            coord[4] = vec3f(f32(x), f32(y + 1), f32(z));
                            coord[5] = vec3f(f32(x + 1), f32(y + 1), f32(z));
                            coord[6] = vec3f(f32(x), f32(y), f32(z)) + 1;
                            coord[7] = vec3f(f32(x), f32(y + 1), f32(z + 1));
                            
                            index = 0;
                            for (var i : u32 = 0; i < 8; i++) {
                                if (density(coord[i]) >= 0) {
                                    index |= 1u << i;
                                }
                            }

                            lookupLimit = triLookup[index][0] + triLookup[index][1];
                            for (var i = triLookup[index][0]; i < lookupLimit; i += 3) {
                                edgeA = triTable[i];
                                edgeB = triTable[i + 1];
                                edgeC = triTable[i + 2];
                                interpolate(offset, vertID, coord[cornerFromA[edgeA]], coord[cornerFromB[edgeA]]);
                                vertID += 6;
                                interpolate(offset, vertID, coord[cornerFromA[edgeB]], coord[cornerFromB[edgeB]]);
                                vertID += 6;
                                interpolate(offset, vertID, coord[cornerFromA[edgeC]], coord[cornerFromB[edgeC]]);
                                vertID += 6;
                            }
                        }
                    }
                }
            }
        }
    }

    _vertices[0] = f32(vertID);
}